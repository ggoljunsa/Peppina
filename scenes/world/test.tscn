[gd_scene load_steps=9 format=3 uid="uid://c2ky84fwii5ic"]

[ext_resource type="PackedScene" uid="uid://doyr88dp1mja3" path="res://scenes/player/player.tscn" id="1_lcryg"]

[sub_resource type="ProceduralSkyMaterial" id="ProceduralSkyMaterial_a3lor"]
sky_horizon_color = Color(0.64625, 0.65575, 0.67075, 1)
ground_horizon_color = Color(0.64625, 0.65575, 0.67075, 1)

[sub_resource type="Sky" id="Sky_3crw3"]
sky_material = SubResource("ProceduralSkyMaterial_a3lor")

[sub_resource type="Environment" id="Environment_i3vwh"]
background_mode = 2
sky = SubResource("Sky_3crw3")
tonemap_mode = 2
glow_enabled = true

[sub_resource type="BoxMesh" id="BoxMesh_jjegd"]
size = Vector3(50, 0.1, 50)

[sub_resource type="Shader" id="Shader_teqb3"]
code = "shader_type spatial;
render_mode blend_mix,depth_draw_opaque, unshaded;

uniform vec4 gridColor: source_color;
uniform vec4 checkerColor: source_color;
uniform float fadeStart = 0.0;
uniform float fadeEnd = 10.0;
uniform float unitSize = 1.0;
uniform int subdivisions: hint_range(1, 10) = 5;
uniform float majorLineThickness = 2.0;
uniform float minorLineThickness = 1.0;
uniform float minorLineAlpha: hint_range(0.0, 1.0) = .3;
uniform vec3 centerOffset = vec3(0.0, 0.0, 0.0);

// calculate line mask, usning a bit of fwidth() magic to make line width not affected by perspective
float grid(vec2 pos, float unit, float thickness){
	vec2 threshold = fwidth(pos) * thickness * .5 / unit;
	vec2 posWrapped = pos / unit;
	vec2 line = step(fract(-posWrapped), threshold) + step(fract(posWrapped), threshold);
	return max(line.x, line.y);
}

// calculate checkerboard mask
float checker(vec2 pos, float unit){
	float square1 = step(.5, fract(pos.x / unit *.5));
	float square2 = step(.5, fract(pos.y / unit *.5));
	return max(square1,square2) - square1 * square2;
}

void fragment() {
	// ray from camera to fragemnt in wrold space
	vec3 rayWorld = normalize(mat3(INV_VIEW_MATRIX) * VIEW) ;

	// calculate fragment position in world space
	vec3 posWorld;
	float t = -(CAMERA_POSITION_WORLD.y - centerOffset.y) / (rayWorld.y );
	posWorld.y = -centerOffset.y;
	posWorld.xz = CAMERA_POSITION_WORLD.xz + t * rayWorld.xz + centerOffset.xz;

	// calculate planar distance from camera to fragment (used for fading)
	float distPlanar = distance(posWorld.xz, centerOffset.xz);

	// grid
	float line = grid(posWorld.xz, unitSize, majorLineThickness);
	line += grid(posWorld.xz, unitSize / float(subdivisions), minorLineThickness) * minorLineAlpha;
	line = clamp(line, 0.0, 1.0);

	// checkerboard
	float chec = checker(posWorld.xz, unitSize);

	// distance fade factor
	float fadeFactor = 1.0 - clamp((distPlanar - fadeStart) / (fadeEnd - fadeStart), 0.0, 1.0);

	// write ground plane depth into z buffer
	vec4 pp = (PROJECTION_MATRIX * (VIEW_MATRIX * vec4(posWorld, 1.0)));
	DEPTH = pp.z / pp.w;

	// final alpha
	float alphaGrid = line * gridColor.a;
	float alphaChec = chec * checkerColor.a;
	ALPHA = clamp(alphaGrid + alphaChec, 0.0, 1.0) * fadeFactor;
	// eliminate grid above the horizon
	ALPHA *= step(t, 0.0);

	// final color (premultiplied alpha blend)
	ALBEDO = (checkerColor.rgb * alphaChec) * (1.0 - alphaGrid) + (gridColor.rgb * alphaGrid);

}"

[sub_resource type="ShaderMaterial" id="ShaderMaterial_u6se4"]
render_priority = 0
shader = SubResource("Shader_teqb3")
shader_parameter/gridColor = Color(0, 0, 0, 1)
shader_parameter/checkerColor = Color(0, 0, 0, 1)
shader_parameter/fadeStart = 0.0
shader_parameter/fadeEnd = 10.0
shader_parameter/unitSize = 1.0
shader_parameter/subdivisions = 5
shader_parameter/majorLineThickness = 2.0
shader_parameter/minorLineThickness = 1.0
shader_parameter/minorLineAlpha = 1.0
shader_parameter/centerOffset = Vector3(0, 0, 0)

[sub_resource type="BoxShape3D" id="BoxShape3D_huwun"]
size = Vector3(50, 0.218, 50)

[node name="Test" type="Node3D"]

[node name="WorldEnvironment" type="WorldEnvironment" parent="."]
environment = SubResource("Environment_i3vwh")

[node name="DirectionalLight3D" type="DirectionalLight3D" parent="."]
transform = Transform3D(-0.866023, -0.433016, 0.250001, 0, 0.499998, 0.866027, -0.500003, 0.749999, -0.43301, 0, 0, 0)
shadow_enabled = true

[node name="StaticBody3D" type="StaticBody3D" parent="."]

[node name="MeshInstance3D" type="MeshInstance3D" parent="StaticBody3D"]
mesh = SubResource("BoxMesh_jjegd")
skeleton = NodePath("../..")
surface_material_override/0 = SubResource("ShaderMaterial_u6se4")

[node name="CollisionShape3D" type="CollisionShape3D" parent="StaticBody3D"]
transform = Transform3D(1, 0, 0, 0, 1, 0, 0, 0, 1, 0, -0.223633, 0)
shape = SubResource("BoxShape3D_huwun")

[node name="CharacterBody3D" parent="." instance=ExtResource("1_lcryg")]
transform = Transform3D(1, 0, 0, 0, 1, 0, 0, 0, 1, -0.0889416, -0.114633, 0.460205)
