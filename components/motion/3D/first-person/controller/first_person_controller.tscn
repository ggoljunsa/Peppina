[gd_scene load_steps=31 format=3 uid="uid://bx3bh475g3jjf"]

[ext_resource type="Script" path="res://components/motion/3D/first-person/controller/first_person_controller.gd" id="1_v7v7g"]
[ext_resource type="PackedScene" uid="uid://bcj2w63oj13e5" path="res://components/motion/3D/first-person/controller/debug_ui/first_person_debug_ui.tscn" id="2_ml2dd"]
[ext_resource type="Script" path="res://components/motion/3D/first-person/controller/mechanics/camera_controller_3d.gd" id="5_2gxvf"]
[ext_resource type="Script" path="res://components/motion/3D/first-person/controller/states/air/fall.gd" id="8_5oo54"]
[ext_resource type="Script" path="res://components/motion/3D/first-person/controller/states/ground/crouch.gd" id="8_to2uw"]
[ext_resource type="Script" path="res://components/motion/3D/first-person/controller/states/ground/crawl.gd" id="9_ps4a4"]
[ext_resource type="Script" path="res://components/motion/3D/first-person/controller/states/air/jump.gd" id="10_ynwvi"]
[ext_resource type="Script" path="res://components/motion/3D/first-person/controller/states/ground/slide.gd" id="11_jpv7j"]
[ext_resource type="Script" path="res://components/motion/3D/first-person/controller/states/special/swim.gd" id="12_vyybp"]
[ext_resource type="Script" path="res://components/camera/3D/shake/camera_shake_3d.gd" id="14_smxor"]
[ext_resource type="Script" path="res://components/motion/3D/first-person/shooter/weapons/firearm_weapon_holder.gd" id="15_cjftc"]
[ext_resource type="Script" path="res://components/motion/3D/first-person/shooter/weapons/motion/weapon_sway.gd" id="16_2a3la"]
[ext_resource type="Script" path="res://components/motion/3D/first-person/shooter/weapons/motion/weapon_noise.gd" id="17_vpodh"]
[ext_resource type="Script" path="res://components/motion/3D/first-person/shooter/weapons/motion/weapon_tilt.gd" id="18_2tnx5"]
[ext_resource type="Script" path="res://components/motion/3D/first-person/shooter/weapons/motion/weapon_impulse.gd" id="19_bbu1p"]
[ext_resource type="Script" path="res://components/motion/3D/first-person/shooter/weapons/motion/weapon_recoil.gd" id="20_iio1q"]
[ext_resource type="Script" path="res://components/motion/3D/first-person/shooter/weapons/firearm_weapon.gd" id="21_q3kyc"]

[sub_resource type="Animation" id="Animation_x0wk0"]
length = 0.001
tracks/0/type = "value"
tracks/0/imported = false
tracks/0/enabled = true
tracks/0/path = NodePath("CeilShapeCast:target_position")
tracks/0/interp = 1
tracks/0/loop_wrap = true
tracks/0/keys = {
"times": PackedFloat32Array(0),
"transitions": PackedFloat32Array(1),
"update": 0,
"values": [Vector3(0, 0.65, 0)]
}
tracks/1/type = "value"
tracks/1/imported = false
tracks/1/enabled = true
tracks/1/path = NodePath("CameraController:position")
tracks/1/interp = 1
tracks/1/loop_wrap = true
tracks/1/keys = {
"times": PackedFloat32Array(0),
"transitions": PackedFloat32Array(1),
"update": 0,
"values": [Vector3(0, 0.75, 0)]
}

[sub_resource type="Animation" id="Animation_p5yay"]
resource_name = "crawl"
length = 0.2
tracks/0/type = "value"
tracks/0/imported = false
tracks/0/enabled = true
tracks/0/path = NodePath("CeilShapeCast:target_position")
tracks/0/interp = 2
tracks/0/loop_wrap = true
tracks/0/keys = {
"times": PackedFloat32Array(0, 0.166667),
"transitions": PackedFloat32Array(1, 1),
"update": 0,
"values": [Vector3(0, 0.1, 0), Vector3(0, -0.3, 0)]
}
tracks/1/type = "value"
tracks/1/imported = false
tracks/1/enabled = true
tracks/1/path = NodePath("CameraController:position")
tracks/1/interp = 2
tracks/1/loop_wrap = true
tracks/1/keys = {
"times": PackedFloat32Array(0, 0.166667),
"transitions": PackedFloat32Array(1, 1),
"update": 0,
"values": [Vector3(0, 0.1, 0), Vector3(0, -0.1, 0)]
}

[sub_resource type="Animation" id="Animation_uc3uk"]
resource_name = "crouch"
length = 0.2
tracks/0/type = "value"
tracks/0/imported = false
tracks/0/enabled = true
tracks/0/path = NodePath("CeilShapeCast:target_position")
tracks/0/interp = 2
tracks/0/loop_wrap = true
tracks/0/keys = {
"times": PackedFloat32Array(0, 0.2),
"transitions": PackedFloat32Array(1, 1),
"update": 0,
"values": [Vector3(0, 0.65, 0), Vector3(0, 0.1, 0)]
}
tracks/1/type = "value"
tracks/1/imported = false
tracks/1/enabled = true
tracks/1/path = NodePath("CameraController:position")
tracks/1/interp = 2
tracks/1/loop_wrap = true
tracks/1/keys = {
"times": PackedFloat32Array(0, 0.2),
"transitions": PackedFloat32Array(1, 1),
"update": 0,
"values": [Vector3(0, 0.75, 0), Vector3(0, 0.1, 0)]
}

[sub_resource type="AnimationLibrary" id="AnimationLibrary_8y2xj"]
_data = {
"RESET": SubResource("Animation_x0wk0"),
"crawl": SubResource("Animation_p5yay"),
"crouch": SubResource("Animation_uc3uk")
}

[sub_resource type="GDScript" id="GDScript_25w3o"]
script/source = "@icon(\"res://components/behaviour/finite-state-machine/fsm.png\")
class_name FiniteStateMachine extends Node


signal states_initialized(states: Dictionary)
signal state_changed(from_state: MachineState, state: MachineState)
signal state_change_failed(from: MachineState, to: MachineState)
signal stack_pushed(new_state: MachineState, stack: Array[MachineState])
signal stack_flushed(stack: Array[MachineState])

@export var current_state: MachineState
@export var enable_stack: bool = true
@export var stack_capacity: int = 3
@export var flush_stack_when_reach_capacity: bool = false

var states: Dictionary = {}
var transitions: Dictionary = {}
var states_stack: Array[MachineState] = []

var is_transitioning: bool = false
var locked: bool = false


func _ready():
	assert(current_state is MachineState, \"FiniteStateMachine: This Finite state machine does not have an initial state defined\")

	state_changed.connect(on_state_changed)
	state_change_failed.connect(on_state_change_failed)
	
	_prepare_states()
	enter_state(current_state)
	states_initialized.emit(states)
	

func _unhandled_input(event):
	current_state.handle_input(event)


func _physics_process(delta):
	current_state.physics_update(delta)


func _process(delta):
	current_state.update(delta)


func change_state_to(next_state: Variant, parameters: Dictionary = {}):
	if not is_transitioning:
		
		if next_state is GDScript:
			if current_state_is_by_class(next_state):
				return
				
			var state_name: String = next_state.get_global_name()
			
			if states.has(state_name):
				run_transition(current_state, states[state_name], parameters)
			else:
				push_error(\"FiniteStateMachine: The change of state cannot be done because %s does not exist in this Finite State Machine\" % state_name)
		
		elif typeof(next_state) == TYPE_STRING:
			if current_state_is_by_name(next_state):
				return
			
			if states.has(next_state):
				run_transition(current_state, states[next_state], parameters)
			else:
				push_error(\"FiniteStateMachine: The change of state cannot be done because %s does not exist in this Finite State Machine\" % next_state)
		
		elif next_state is MachineState:
			if current_state_is(next_state):
				return
				
			if states.values().has(next_state):
				run_transition(current_state, next_state, parameters)
			else:
				push_error(\"FiniteStateMachine: The change of state cannot be done because %s does not exist in this Finite State Machine\" % next_state.name)
		
		
func run_transition(from: MachineState, to: MachineState, parameters: Dictionary = {}):
	is_transitioning = true

	var transition_name = _build_transition_name(from, to)

	if not transitions.has(transition_name):
		transitions[transition_name] = NeutralMachineTransition.new()
	
	var transition := transitions[transition_name] as MachineTransition
	transition.from_state = from
	transition.to_state = to
	transition.parameters = parameters
	
	if transition.should_transition():		
		transition.on_transition()
		state_changed.emit(from, to)
		
		return
	
	state_change_failed.emit(from, to)

## Example register_transition(WalkToRun.new())
func register_transition(transition: MachineTransition):
	transitions[transition.get_script().get_global_name()] = transition


func register_transitions(new_transitions: Array[MachineTransition]):
	for transition in new_transitions:
		register_transition(transition)
	

func enter_state(state: MachineState):
	is_transitioning = false
	state.entered.emit()
	state.enter()
		

func exit_state(state: MachineState, _next_state: MachineState):
	state.finished.emit(_next_state)
	state.exit(_next_state)


func current_state_is_by_name(state: String) -> bool:
	return current_state.name.strip_edges().to_lower() == state.strip_edges().to_lower()


func current_state_is(state: MachineState) -> bool:
	return current_state_is_by_name(state.name)


func current_state_is_by_class(state: GDScript) -> bool:
	return current_state.get_script() == state


func current_state_is_not(_states: Array = []) -> bool:
	return _states.any(func(state):
		if typeof(state) == TYPE_STRING:
			return current_state_is_by_name(state)
		
		if state is MachineState:
			return current_state_is(state)
		
		return false
	)
	

func last_state() -> MachineState:
	return states_stack.back() if states_stack.size() > 0 else null


func next_to_last_state() -> MachineState:
	return states_stack[states_stack.size() - 2] if states_stack.size() > 1 else null


func _build_transition_name(from: MachineState, to: MachineState) -> String:
	var transition_name: String = \"%sTo%sTransition\" % [from.name.strip_edges(), to.name.strip_edges()]
	
	if not transitions.has(transition_name):
		transition_name = \"AnyTo%sTransition\" % to.name.strip_edges()
	
	return transition_name
	

func push_state_to_stack(state: MachineState) -> void:
	if enable_stack and stack_capacity > 0:
		if states_stack.size() >= stack_capacity:
			if flush_stack_when_reach_capacity:
				stack_flushed.emit(states_stack)
				states_stack.clear()
			else:
				states_stack.pop_front()
			
		states_stack.append(state)
		stack_pushed.emit(state, states_stack)
			


func lock_state_machine():
	process_mode =  ProcessMode.PROCESS_MODE_DISABLED

	
func unlock_state_machine():
		process_mode =  ProcessMode.PROCESS_MODE_INHERIT


func _prepare_states(node: Node = self):
	for child in node.get_children(true):
		if child is MachineState:
			
			_add_state_to_dictionary(child)
		else:
			if child.get_child_count() > 0:
				_prepare_states(child)


func _add_state_to_dictionary(state: MachineState):
	if state.is_inside_tree():
		states[state.name] = get_node(state.get_path())
		state.FSM = self
		state.ready()


func on_state_changed(from: MachineState, to: MachineState):
	push_state_to_stack(from)
	exit_state(from, to)
	enter_state(to)

	current_state = to


func on_state_change_failed(_from: MachineState, _to: MachineState):
	is_transitioning = false
"

[sub_resource type="GDScript" id="GDScript_o6jct"]
script/source = "class_name Idle extends GroundState2



func physics_update(delta):
	super.physics_update(delta)

	if not actor.motion_input.input_direction.is_zero_approx():
		FSM.change_state_to(\"Walk\")
	actor.move_and_slide()
"

[sub_resource type="GDScript" id="GDScript_gk7r8"]
script/source = "class_name Walk extends GroundState

@export var catching_breath_recovery_time: float = 3.0

var catching_breath_timer: Timer


func ready() -> void:
	pass
	
	
func enter():
	actor.velocity.y = 0


func physics_update(delta):
	super.physics_update(delta)
	
	if actor.motion_input.input_direction.is_zero_approx():
		FSM.change_state_to(\"Idle\")
	detect_run()

	

	
	actor.move_and_slide()
	
"

[sub_resource type="GDScript" id="GDScript_ys40m"]
script/source = "class_name Run extends GroundState2

@export var sprint_time: float = 3.5

var in_recovery: bool = false

var sprint_timer: Timer


func ready() -> void:
	_create_sprint_timer()


func enter():
	actor.velocity.y = 0
	
	if sprint_time > 0 and is_instance_valid(sprint_timer):
		sprint_timer.start()
		
	in_recovery = false


func physics_update(delta):
	super.physics_update(delta)
	
	if actor.motion_input.input_direction.is_zero_approx() or not Input.is_action_pressed(run_input_action):
		FSM.change_state_to(\"Walk\")
	
	accelerate(delta)
	actor.move_and_slide()
	

	
func _create_sprint_timer() -> void:
	if not sprint_timer:
		sprint_timer = Timer.new()
		sprint_timer.name = \"RunSprintTimer\"
		sprint_timer.wait_time = sprint_time
		sprint_timer.process_callback = Timer.TIMER_PROCESS_PHYSICS
		sprint_timer.autostart = false
		sprint_timer.one_shot = true
		
		add_child(sprint_timer)
		sprint_timer.timeout.connect(on_sprint_timer_timeout)
		

func on_sprint_timer_timeout() -> void:
	in_recovery = true
	FSM.change_state_to(\"Walk\")
"

[sub_resource type="CapsuleShape3D" id="CapsuleShape3D_1od8w"]

[sub_resource type="CapsuleShape3D" id="CapsuleShape3D_n3iq5"]
height = 1.4

[sub_resource type="CapsuleShape3D" id="CapsuleShape3D_ftet6"]
height = 1.0

[sub_resource type="SphereShape3D" id="SphereShape3D_plvkn"]

[sub_resource type="FastNoiseLite" id="FastNoiseLite_dfk1p"]
noise_type = 3
seed = 50
frequency = 0.02
offset = Vector3(1, 0.5, 0)
fractal_octaves = 1
fractal_lacunarity = 1.0

[node name="FirstPersonController" type="CharacterBody3D"]
transform = Transform3D(1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0.879968, 0)
collision_layer = 2
collision_mask = 21
script = ExtResource("1_v7v7g")
fov_by_state = {
"run": 85.0,
"slide": 80.0
}
crawl = true

[node name="DebugUI" parent="." node_paths=PackedStringArray("actor", "finite_state_machine") instance=ExtResource("2_ml2dd")]
actor = NodePath("..")
finite_state_machine = NodePath("../FiniteStateMachine")

[node name="AnimationPlayer" type="AnimationPlayer" parent="."]
libraries = {
"": SubResource("AnimationLibrary_8y2xj")
}

[node name="FiniteStateMachine" type="Node" parent="." node_paths=PackedStringArray("current_state")]
script = SubResource("GDScript_25w3o")
current_state = NodePath("Ground/Idle")

[node name="Ground" type="Node" parent="FiniteStateMachine"]

[node name="Idle" type="Node" parent="FiniteStateMachine/Ground" node_paths=PackedStringArray("actor")]
script = SubResource("GDScript_o6jct")
actor = NodePath("../../..")

[node name="Walk" type="Node" parent="FiniteStateMachine/Ground"]
script = SubResource("GDScript_gk7r8")

[node name="Crouch" type="Node" parent="FiniteStateMachine/Ground" node_paths=PackedStringArray("actor")]
script = ExtResource("8_to2uw")
actor = NodePath("../../..")
speed = 2.0
side_speed = 1.9

[node name="Run" type="Node" parent="FiniteStateMachine/Ground" node_paths=PackedStringArray("actor")]
script = SubResource("GDScript_ys40m")
sprint_time = null
gravity_force = null
speed = 5.5
side_speed = 5.0
acceleration = 15.0
friction = 12.0
stair_stepping_enabled = null
max_step_up = null
max_step_down = null
vertical = null
horizontal = null
run_input_action = null
jump_input_action = null
crouch_input_action = null
crawl_input_action = null
crouch_animation = null
crawl_animation = null
actor = NodePath("../../..")

[node name="Crawl" type="Node" parent="FiniteStateMachine/Ground" node_paths=PackedStringArray("actor")]
script = ExtResource("9_ps4a4")
actor = NodePath("../../..")
speed = 1.5
side_speed = 1.4

[node name="Slide" type="Node" parent="FiniteStateMachine/Ground" node_paths=PackedStringArray("actor")]
script = ExtResource("11_jpv7j")
actor = NodePath("../../..")

[node name="Air" type="Node" parent="FiniteStateMachine"]

[node name="Jump" type="Node" parent="FiniteStateMachine/Air" node_paths=PackedStringArray("actor")]
script = ExtResource("10_ynwvi")
actor = NodePath("../../..")

[node name="Fall" type="Node" parent="FiniteStateMachine/Air" node_paths=PackedStringArray("actor")]
script = ExtResource("8_5oo54")
actor = NodePath("../../..")

[node name="Special" type="Node" parent="FiniteStateMachine"]

[node name="Swim" type="Node" parent="FiniteStateMachine/Special" node_paths=PackedStringArray("eyes", "actor")]
script = ExtResource("12_vyybp")
eyes = NodePath("../../../CameraController/Head")
actor = NodePath("../../..")

[node name="StandCollisionShape" type="CollisionShape3D" parent="."]
shape = SubResource("CapsuleShape3D_1od8w")

[node name="CrouchCollisionShape" type="CollisionShape3D" parent="."]
transform = Transform3D(1, 0, 0, 0, 1, 0, 0, 0, 1, 0, -0.291229, 0)
shape = SubResource("CapsuleShape3D_n3iq5")

[node name="CrawlCollisionShape" type="CollisionShape3D" parent="."]
transform = Transform3D(1, 0, 0, 0, 1, 0, 0, 0, 1, 0, -0.398812, 0)
shape = SubResource("CapsuleShape3D_ftet6")

[node name="CeilShapeCast" type="ShapeCast3D" parent="."]
shape = SubResource("SphereShape3D_plvkn")
target_position = Vector3(0, 0.65, 0)
debug_shape_custom_color = Color(0, 0.854902, 0, 1)

[node name="CameraController" type="Node3D" parent="." node_paths=PackedStringArray("actor", "camera", "bob_head")]
transform = Transform3D(1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0.75, 0)
script = ExtResource("5_2gxvf")
actor = NodePath("..")
camera = NodePath("Head/CameraShake3D")
bob_head = NodePath("Head")

[node name="Head" type="Node3D" parent="CameraController"]

[node name="CameraShake3D" type="Camera3D" parent="CameraController/Head"]
script = ExtResource("14_smxor")

[node name="FireArmWeaponHolder" type="Node3D" parent="CameraController/Head/CameraShake3D" node_paths=PackedStringArray("actor", "camera_controller", "camera_recoil_node")]
transform = Transform3D(1, 0, 0, 0, 1, 0, 0, 0, 1, 0.33, -0.55, -0.56)
script = ExtResource("15_cjftc")
actor = NodePath("../../../..")
camera_controller = NodePath("../../..")
camera_recoil_node = NodePath("../..")

[node name="Sway" type="Node3D" parent="CameraController/Head/CameraShake3D/FireArmWeaponHolder"]
script = ExtResource("16_2a3la")
smoothing = 10.0

[node name="Noise" type="Node3D" parent="CameraController/Head/CameraShake3D/FireArmWeaponHolder/Sway"]
script = ExtResource("17_vpodh")
noise = SubResource("FastNoiseLite_dfk1p")

[node name="Tilt" type="Node3D" parent="CameraController/Head/CameraShake3D/FireArmWeaponHolder/Sway/Noise"]
script = ExtResource("18_2tnx5")

[node name="Impulse" type="Node3D" parent="CameraController/Head/CameraShake3D/FireArmWeaponHolder/Sway/Noise/Tilt"]
script = ExtResource("19_bbu1p")

[node name="Recoil" type="Node3D" parent="CameraController/Head/CameraShake3D/FireArmWeaponHolder/Sway/Noise/Tilt/Impulse"]
script = ExtResource("20_iio1q")

[node name="FireArmWeapon" type="Node3D" parent="CameraController/Head/CameraShake3D/FireArmWeaponHolder/Sway/Noise/Tilt/Impulse/Recoil" node_paths=PackedStringArray("camera")]
script = ExtResource("21_q3kyc")
camera = NodePath("../../../../../../..")
